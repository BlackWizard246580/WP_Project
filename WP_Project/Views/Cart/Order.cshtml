@model WP_Project.ViewModels.OrderFormVM
@{
    ViewBag.Title = "Order";
    Layout = "~/Views/Shared/ShopLayout.cshtml";
}
<style>
    /* Always set the map height explicitly to define the size of the div
    * element that contains the map. */
    #map {
        height: 100%;
    }
    /* Optional: Makes the sample page fill the window. */
    html, body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>
<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
<style>
    #locationField, #controls {
        position: relative;
        width: 480px;
    }

    #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
    }

    .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
    }

    #address {
        border: 1px solid #000090;
        background-color: #f0f0ff;
        width: 480px;
        padding-right: 2px;
    }

        #address td {
            font-size: 10pt;
        }

    .field {
        width: 99%;
    }

    .slimField {
        width: 80px;
    }

    .wideField {
        width: 200px;
    }

    #locationField {
        height: 20px;
        margin-bottom: 2px;
    }
</style>

<div class="cart-table-area section-padding-100">
    <div class="cart-title mt-50">
        <h2>@ViewBag.Title.</h2>
    </div>

    @using (Html.BeginForm("Checkout", "Cart", FormMethod.Post, new { name = "orderform", id = "orderform" }))
{
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Please fill the below form to complete the ordering process.</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div id="locationField">
                        <input id="autocomplete" name="Address" placeholder="Enter your address"
                               onFocus="geolocate()" type="text"></input>
                    </div>

                    <table id="address">
                        <tr>
                            <td class="label">Street address</td>
                            <td class="slimField">
                                <input class="field" id="street_number"
                                       disabled="true"></input>
                            </td>
                            <td class="wideField" colspan="2">
                                <input class="field" id="route"
                                       disabled="true"></input>
                            </td>
                        </tr>
                        <tr>
                            <td class="label">City</td>
                            <!-- Note: Selection of address components in this example is typical.
                 You may need to adjust it for the locations relevant to your app. See
                 https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
            -->
                            <td class="wideField" colspan="3">
                                <input class="field" id="locality"
                                       disabled="true"></input>
                            </td>
                        </tr>
                        <tr>
                            <td class="label">State</td>
                            <td class="slimField">
                                <input class="field"
                                       id="administrative_area_level_1" disabled="true"></input>
                            </td>
                            <td class="label">Zip code</td>
                            <td class="wideField">
                                <input class="field" id="postal_code"
                                       disabled="true"></input>
                            </td>
                        </tr>
                        <tr>
                            <td class="label">Country</td>
                            <td class="wideField" colspan="3">
                                <input class="field"
                                       id="country" disabled="true"></input>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="col-md-10">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.OrderDateTime, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrderDateTime, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderDateTime, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Order" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
    <div>
        @Html.ActionLink("Back to Check Amount", "CheckAmount")
    </div>
</div>


<script>
      // This example displays an address form, using the autocomplete feature
      // of the Google Places API to help users fill in the information.

      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyChu0weNu8pxg9wT3qdVyz8pBu-sPr_VNc&libraries=places">

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /**  {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCfQYMDZmPiwX39MM3jHU5IPj5FmAU23gE&libraries=places&callback=initAutocomplete"
        async defer></script>

@section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script type="text/javascript" src="https://code.jquery.com/jquery-1.12.4.js"></script>
        $(function () {

    $( "#orderform" ).submit(function( event ) {
  alert( "Handler for .submit() called." );
  event.preventDefault();
});


        @*$("orderform").submit(function () {
            alert("Hello");
            var street_number = $("#street_number").val();
            var route = $("#route").val();
            var locality = $("#locality").val();
            var administrative_area_level_1 = $("#administrative_area_level_1").val();
            var postal_code = $("#postal_code").val();
            var country = $("#country").val();
            var Address = street_number + "," + route + "," + locality + "," + administrative_area_level_1 + "," + postal_code + "," + country;
            alert(Address);
            return false;
        });*@

    });
    }